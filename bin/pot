#! /usr/bin/env ruby

require 'optparse'

require_relative '../lib/config'
require_relative '../lib/pr'
require_relative '../lib/services/github_client.rb'
require_relative '../lib/pr_user_collection'

def main
  if options[:config] || !config.initialized?
    if !options[:config] && !config.initialized?
      puts 'You need to set your config first'
    end

    config.init

    exit(0) if options[:config]
  end

  if options[:url_only]
    if options[:user].nil?
      puts 'Option "url_only" can be only be used with --user=<the_user>'
      exit(1)
    end

    # Trigger calculations
    user_pr_counts

    if options[:actionable].nil?
      puts pr_urls.map { |pr| pr[:url] }
    else
      pr_urls.each do |pr|
        puts pr[:url] if pr[:actionable] == options[:actionable]
      end
    end

    exit(0)
  end

  puts table_print

  if options[:user]
    puts 'Authored:'
    puts '---------'
    puts 'Actionable | Approved/All_Reviewers | PR'
    user_prs[:authored].
      sort { |user_pr| user_pr[:actionable] ? 0 : 1 }.
      each do |user_pr|
        state = user_pr[:actionable] ? 'Yes' : 'No'
        state = state.ljust('Actionable |'.size)

        num_of_approvals = user_pr[:num_of_approvals].to_s.rjust('Approved'.size - 1)
        num_of_reviewers = user_pr[:num_of_reviewers].to_s.ljust('All_Reviewers |'.size - 1)

        approved_to_num_of_reviewers = "#{num_of_approvals} / #{num_of_reviewers}"

        puts "#{state} #{approved_to_num_of_reviewers} #{user_pr[:title]}"
      end

    puts

    puts 'Reviewing:'
    puts '----------'
    puts 'Actionable | Untouched | Author: Actionables | Approved/All_Reviewers | PR'
    user_prs[:reviewing].
      # Putting actionable PRs first and then sorting by author actionables
      # count
      sort do |a, b|
        actionable_score_a = a[:actionable] ? 0 : 1
        actionable_score_b = b[:actionable] ? 0 : 1

        actionables_per_author_a = actionables_per_author[a[:author]]
        actionables_per_author_b = actionables_per_author[b[:author]]

        [actionable_score_a, actionables_per_author_a] <=> [actionable_score_b, actionables_per_author_b]
      end.
      each do |user_pr|
        state = user_pr[:actionable] ? 'Yes' : 'No'
        state = state.ljust('Actionable |'.size)

        untouched = user_pr[:untouched] ? 'Yes' : 'No'
        untouched = untouched.ljust('Untouched |'.size)

        author_actionables = "#{user_pr[:author]}: #{actionables_per_author[user_pr[:author]]}"
        author_actionables = author_actionables.ljust('Author: Actionables |'.size)

        num_of_approvals = user_pr[:num_of_approvals].to_s.rjust('Approved'.size - 1)
        num_of_reviewers = user_pr[:num_of_reviewers].to_s.ljust('All_Reviewers |'.size - 1)

        approved_to_num_of_reviewers = "#{num_of_approvals} / #{num_of_reviewers}"

        puts "#{state} #{untouched} #{author_actionables} " \
          "#{approved_to_num_of_reviewers} #{user_pr[:title]}"
      end
  end
end

def user_prs
  @user_prs ||= { authored: [], reviewing: [] }
end

def pr_urls
  @pr_urls ||= []
end

def options
  @options ||= {}
end

def actionables_per_author
  @actionables_per_author ||= Hash.new { 0 }
end

def untouched_per_author
  @untouched_per_author ||= Hash.new { 0 }
end

OptionParser.new do |opts|
  opts.banner = 'GAT=<your_github_access_token> [--users=some,user,names] [--user=user_name]'

  opts.on('--config', '--configure', 'Outputs only the urls of the PRs authored and the PRs to be reviewed') do
    options[:config] = true
  end

  opts.on('--users=user_names', '--users' , 'Shows only the specified users\' metrics') do |value|
    options[:users] = value
  end

  opts.on('--user=user_name', '--user', 'Shows only the specified user\'s metrics, as well as the PR titles') do |value|
    options[:user] = value
  end

  opts.on('--url-only', 'Outputs only the urls of the PRs authored and the PRs to be reviewed') do
    options[:url_only] = true

    exit(1) if options[:user].nil?
  end

  opts.on('--actionable=actionable', 'Whether to list actionable/non-actionable PR urls (true/false)') do |value|
    if !['true', 'false'].include?(value)
      puts 'Accepted values for actionable: true, false'
      exit(1)
    end

    options[:actionable] = value == 'true'

    exit(1) if options[:url_only].nil?
  end
end.parse!

def prs
  @prs ||= GithubClient.prs.map { |pr| Pr.new(pr) }
end

def user_pr_counts
  return @user_pr_counts if !@user_pr_counts.nil?

  @user_pr_counts = Hash.new { |hash, key| hash[key] = { author: 0, active_reviewer: 0 } }

  prs.each do |pr|
    actionable = nil

    if pr.author == options[:user]
      actionable = pr.author_actionable?
      user_prs[:authored] << {
        title: "#{pr.title} (#{pr.url})",
        actionable: actionable,
        num_of_approvals: pr.num_of_approvals,
        num_of_reviewers: pr.num_of_reviewers
      }
    end

    if pr.active_reviewers.include?(options[:user])
      actionable = pr.reviewer_actionable?(user: options[:user])
      user_prs[:reviewing] << {
        title: "#{pr.title} (#{pr.url})",
        actionable: actionable,
        author: pr.author,
        untouched: pr.untouched_by(options[:user]),
        num_of_approvals: pr.num_of_approvals,
        num_of_reviewers: pr.num_of_reviewers
      }
    end

    # Increment actionable counts
    if pr.author_actionable?
      actionables_per_author[pr.author] += 1
    end

    pr.requested_reviewers.each do |requested_reviewer|
      actionables_per_author[requested_reviewer] += 1

      if pr.untouched_by(requested_reviewer)
        untouched_per_author[requested_reviewer] += 1
      end
    end
    ##

    if options[:url_only] &&
        (pr.active_reviewers.include?(options[:user]) || pr.author == options[:user])
      pr_urls << { url: pr.url, actionable: actionable }
    end

    @user_pr_counts[pr.author][:author] += 1

    pr.active_reviewers.each do |active_reviewer|
      @user_pr_counts[active_reviewer][:active_reviewer] += 1
    end
  end

  @user_pr_counts
end

def table_print
  output = [
    [
      'User' + ' ' * (largest_author_name_size - 'User'.size),
      'Authored',
      'Reviewing',
      'Total',
      'Actionable PRs',
      'Untouched PRs'
    ].join(' | ')
  ]

  output.push('-' * output.first.size)

  pr_users = PrUserCollection.pr_users(
    user_pr_counts: user_pr_counts,
    options: options,
    actionables_per_author: actionables_per_author,
    untouched_per_author: untouched_per_author
  )

  pr_users.
    sort do |a, b|
      [
        a.total_count,
        a.actionable_count,
        a.untouched_count
      ] <=> [
        b.total_count,
        b.actionable_count,
        b.untouched_count
      ]
    end.
    each do |user|
      if(user_included?(user.username))
        output.push(
          [
            user.username + add_user_space(user.username, user.authored_count),
            user.authored_count.to_s + add_authored_space(user.reviewing_count),
            user.reviewing_count.to_s.ljust('Total | '.size),
            user.total_count.to_s.ljust('Actionable PRs | '.size),
            user.actionable_count.to_s.ljust('Untouched PRs | '.size),
            user.untouched_count.to_s
          ].join
        )
      end
    end

  puts output.join("\n")

  nil
end

def user_included?(user)
  options[:users]&.include?(user) || options[:user] == user
end

def largest_author_name_size
  return @largest_author_name_size if !@largest_author_name_size.nil?

  @largest_author_name_size = prs.max_by { |pr| pr.author.size }.author.size
end

def add_user_space(user, author_count = 0)
  ' ' * (
    largest_author_name_size - user.size +
    'Authored | '.size - author_count.to_s.size
  )
end

def add_authored_space(reviewing_count)
  ' ' * ('Reviewing | '.size - reviewing_count.to_s.size)
end

def config
  @config ||= Config.new
end

main
