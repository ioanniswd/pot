#! /usr/bin/env ruby

require 'optparse'

require_relative '../lib/config'
require_relative '../lib/printer'

def main
  if options[:config]
    config.init

    exit(0)
  end

  if options[:register_new]
    config.register_new(options[:registered_name])
  end

  # Use previously saved register
  if options[:registered]
    overwrite_options_with_registered
  end

  printer.print
end

def options
  @options ||= {}
end

OptionParser.new do |opts|
  opts.banner = 'GAT=<your_github_access_token> [--users=some,user,names] [--user=user_name]'

  opts.on('--config', '--configure', 'Outputs only the urls of the PRs authored and the PRs to be reviewed') do
    options[:config] = true
  end

  opts.on('--users=user_names', '--users' , 'Shows only the specified users\' metrics') do |value|
    options[:users] = value
  end

  opts.on('--user=user_name', '--user', 'Shows only the specified user\'s metrics, as well as the PR titles') do |value|
    options[:user] = value
  end

  opts.on('--url-only', 'Outputs only the urls of the PRs authored and the PRs to be reviewed') do
    options[:url_only] = true

    exit(1) if options[:user].nil?
  end

  opts.on('--actionable=actionable', 'Whether to list actionable/non-actionable PR urls (true/false)') do |value|
    if !['true', 'false'].include?(value)
      puts 'Accepted values for actionable: true, false'
      exit(1)
    end

    options[:actionable] = value == 'true'

    exit(1) if options[:url_only].nil?
  end

  opts.on(
    '--github_url=url',
    '--github_url',
    'The github url to use for the requests, defaults to github_url in config file'
  ) do |value|
    options[:github_url] = value
  end

  opts.on(
    '--owner_name=owner_name',
    '--owner_name',
    'The owner name to use in the requests, defaults to owner_name in config file'
  ) do |value|
    options[:owner_name] = value
  end

  opts.on(
    '--repository_names=repository_names',
    '--repository_names',
    'The repository names to search, defaults to repository_names in config file'
  ) do |value|
    options[:repository_names] = value
  end

  opts.on(
    '--register_new=registered_name',
    '--register_new',
    'The name under which current options will be save to be used with --registered <registered_name>'
  ) do |value|
    options[:register_new] = true
    options[:registered_name] = value
  end

  opts.on(
    '--registered=registered_name',
    '--registered',
    'The already registered options under <registered_name> to be used with command'
  ) do |value|
    options[:registered] = true
    options[:registered_name] = value
  end

  opts.on(
    '--cached',
    'Uses the already cached data from the previous request to speed up the response'
  ) do |value|
    options[:cached] = true
  end
end.parse!

def config
  @config ||= Config.new(options: options)
end

def overwrite_options_with_registered
  if !registered_config
    puts "Registered config #{options[:registered]} was not found"

    exit(1)
  end

  registered_config.keys.each do |key|
    options[key.to_sym] ||= registered_config[key]
  end
end

def registered_config
  config.registered_config(options[:registered_name])
end

def printer
  @printer ||= Printer.new(options: options)
end

main
